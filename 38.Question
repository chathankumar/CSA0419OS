#include<stdio.h>

void sort(int burst_time[], int process[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (burst_time[j] > burst_time[j + 1]) {
                int temp = burst_time[j];
                burst_time[j] = burst_time[j + 1];
                burst_time[j + 1] = temp;

                temp = process[j];
                process[j] = process[j + 1];
                process[j + 1] = temp;
            }
        }
    }
}

void calculateTimes(int burst_time[], int n, int waiting_time[], int turnaround_time[]) {
    waiting_time[0] = 0;  // Waiting time for the first process is 0

    for (int i = 1; i < n; i++) {
        waiting_time[i] = burst_time[i - 1] + waiting_time[i - 1];
    }

    for (int i = 0; i < n; i++) {
        turnaround_time[i] = burst_time[i] + waiting_time[i];
    }
}

void calculateAverages(int waiting_time[], int turnaround_time[], int n, float *avg_waiting_time, float *avg_turnaround_time) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        total_waiting_time += waiting_time[i];
        total_turnaround_time += turnaround_time[i];
    }

    *avg_waiting_time = (float)total_waiting_time / n;
    *avg_turnaround_time = (float)total_turnaround_time / n;
}

void displayResults(int process[], int burst_time[], int waiting_time[], int turnaround_time[], int n, float avg_waiting_time, float avg_turnaround_time) {
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", process[i], burst_time[i], waiting_time[i], turnaround_time[i]);
    }

    printf("\nAverage Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
}

int main() {
    int n = 3;  // Number of processes
    int process[] = {0, 1, 2};  // Process IDs
    int burst_time[] = {2, 4, 8};  // Burst times of processes

    int waiting_time[n], turnaround_time[n];
    float avg_waiting_time, avg_turnaround_time;

    sort(burst_time, process, n);
    calculateTimes(burst_time, n, waiting_time, turnaround_time);
    calculateAverages(waiting_time, turnaround_time, n, &avg_waiting_time, &avg_turnaround_time);
    displayResults(process, burst_time, waiting_time, turnaround_time, n, avg_waiting_time, avg_turnaround_time);

    return 0;
}
