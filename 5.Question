#include<stdio.h>

struct process {
    char name;
    int arrival_time, burst_time, waiting_time, turnaround_time, remaining_time;
};

void swap(struct process *xp, struct process *yp) {
    struct process temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void sort(struct process p[], int n) {
    int i, j;
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (p[j].arrival_time > p[j+1].arrival_time) {
                swap(&p[j], &p[j+1]);
            }
        }
    }
}

int main() {
    int n, i, j, t = 0, min_remaining_time, min_remaining_time_index;
    float total_waiting_time = 0, total_turnaround_time = 0;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct process p[n];
    for (i = 0; i < n; i++) {
        printf("Enter the arrival time and burst time for process %d: ", i+1);
        p[i].name = 'P' + i;
        scanf("%d%d", &p[i].arrival_time, &p[i].burst_time);
        p[i].remaining_time = p[i].burst_time;
    }
    sort(p, n);
    printf("\nGantt Chart:\n|");
    while (1) {
        min_remaining_time = 9999;
        min_remaining_time_index = n;
        for (i = 0; i < n; i++) {
            if (p[i].arrival_time <= t && p[i].remaining_time < min_remaining_time && p[i].remaining_time > 0) {
                min_remaining_time = p[i].remaining_time;
                min_remaining_time_index = i;
            }
        }
        if (min_remaining_time_index == n) {
            break;
        }
        p[min_remaining_time_index].remaining_time--;
        printf(" %c |", p[min_remaining_time_index].name);
        if (p[min_remaining_time_index].remaining_time == 0) {
            p[min_remaining_time_index].turnaround_time = t + 1 - p[min_remaining_time_index].arrival_time;
            p[min_remaining_time_index].waiting_time = p[min_remaining_time_index].turnaround_time - p[min_remaining_time_index].burst_time;
            total_waiting_time += p[min_remaining_time_index].waiting_time;
            total_turnaround_time += p[min_remaining_time_index].turnaround_time;
        }
        t++;
    }
    printf("\n\nProcess\t Arrival Time\t Burst Time\t Waiting Time\t Turnaround Time\n");
    for (i = 0; i < n; i++) {
        printf(" %c\t\t %d\t\t %d\t\t %d\t\t %d\n", p[i].name, p[i].arrival_time, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);
    }
    printf("\nAverage Waiting Time: %f", total_waiting_time/n);
    printf("\nAverage Turnaround Time: %f", total_turnaround_time/n);
    return 0;
}
